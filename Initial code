"""
‚úÖ AI News Newsletter Generator
‚úÖ Fetch ‚Üí Summarize ‚Üí Email with logs
‚úÖ Uses OpenAI + NewsAPI + Gmail
‚úÖ Loads .env with explicit path
‚úÖ Ready for Windows Task Scheduler
"""

import os
import requests
import openai
import smtplib
from dotenv import load_dotenv
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from openai import AuthenticationError

# Load .env from specific path
load_dotenv(dotenv_path="C:/Users/amcapehart42/Desktop/qa4/.env")

NEWS_API_KEY = os.getenv("NEWS_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

openai.api_key = OPENAI_API_KEY

# Validate env vars
if None in [NEWS_API_KEY, OPENAI_API_KEY, EMAIL_ADDRESS, EMAIL_PASSWORD]:
    raise EnvironmentError("Missing required environment variables. Check your .env file.")

def fetch_articles():
    print("\nüîç Fetching articles...")
    try:
        res = requests.get(f'https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}')
        articles = res.json().get('articles', [])[:5]
        for i, a in enumerate(articles, 1):
            print(f"{i}. {a['title']}\n   {a['url']}")
        return articles
    except Exception as e:
        print(f"‚ùå Fetch error: {e}")
        return []

def summarize(text):
    prompt = f"Summarize this news article in 3 sentences:\n\n{text}"
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except AuthenticationError as e:
        print("‚ùå OpenAI Auth Error: Check API key permissions in your OpenAI project settings.")
        exit(1)
    except Exception as e:
        print(f"‚ùå Summarize error: {e}")
        return "‚ö†Ô∏è Summary unavailable."

def summarize_all(articles):
    print("\n‚úèÔ∏è Summarizing articles...")
    return [(a['title'], summarize(a.get('description') or a.get('content') or a['title']), a['url']) for a in articles]

def send_email(summaries):
    print("\nüìß Sending email...")
    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = EMAIL_ADDRESS  # send to self
    msg['Subject'] = "üì∞ Your AI-Powered Daily News"

    body = "\n".join(
        f"{i+1}. {title}\nSummary: {summary}\nRead: {url}\n"
        for i, (title, summary, url) in enumerate(summaries)
    )
    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.sendmail(EMAIL_ADDRESS, EMAIL_ADDRESS, msg.as_string())
        print("‚úÖ Email sent!")
    except Exception as e:
        print(f"‚ùå Email error: {e}")

if __name__ == "__main__":
    print("üöÄ Starting AI newsletter generation...")
    articles = fetch_articles()
    if articles:
        summaries = summarize_all(articles)
        send_email(summaries)
